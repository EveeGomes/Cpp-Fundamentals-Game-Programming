Velocity: speed in a certain direction = distance/time

- it's normally measured as meters/second, but in a game we're working with pixels/frame:

- an object will move a certain amount of pixel
- and will be updated at each frame
--> so its velocity will be pixels/frame

- Now in a window with frequency of 60 FPS
- and an object moving 10 pixels/second:

v = 10(p/f) * 60(f/s)
v = 600 p/s

|_______|_______|_______> X
0		10		20

(time and measure needs units, in this example: meter/second)
time = 0 (s)
posX = 0 (m)
- if character moves to the right -> , and in 1s it reaches pos 10, after 1s again it reachers 20m
-  so we see that its v = 10 (m/s)

- now if the character wants to move to the left <-, and it turns around we now have:
time = 0 (s) // because we reset the time for its current position
posX = 20 (m)
- moving at the same speed, after 1s the character is at posX 10, a sec after that: posX 0
- so as he's moving in the negative x direction, we have: v = -10 (m/s)

Therefore, the sign of the velocity is actually determining which direction it's moving!

-> so, to think: if we have the velocity, how to change the position of something?
- the window has a frequency of 60 FPS
- the while loop executes EACH frame, therefore this is where we need to update the position!



// 
#include "raylib.h"

int main() {

   // window dimensions - make them constant
   const int windowWidth = 512;
   const int windowHeight = 380;
   // initialize the window
   InitWindow(windowWidth, windowHeight, "Dapper Dasher Game");

   // rectangle dimensions
   const int recWidth = 50;
   const int recHeight = 80;
   int posY = windowHeight - recHeight; // To have it positioned on the ground: bottom of the window = windowHeight - recHeight (bcz rectangles use the upper left corner for the coordinates)
   //int velocity = -10; // negative so it moves upwards
   int velocity = 0;

   // set FPS to 60
   SetTargetFPS(60);

   // Game while loop
   while (!WindowShouldClose()) {
            
      BeginDrawing();
      ClearBackground(WHITE);

      // update the rectangle's position:
      //posY += velocity;

      // using the above logic, implement JUMP action
      if (IsKeyPressed(KEY_SPACE)) {
         velocity += -10;
         
      }
      posY += velocity;

      // now, draw the rectangle
      DrawRectangle(windowWidth / 2, posY, recWidth, recHeight, BLUE);
      
      
      EndDrawing();
   }
   // raylib function to close the window properly
   CloseWindow();
}